@page "/Cobros/Edit/{CobroId:int}"
@rendermode InteractiveServer
@inject DeudorServices deudorServices
@inject CobrosServices cobroServices
@inject PrestamosServices prestamosServices
@inject NavigationManager navigation

<PageTitle>Edit</PageTitle>
<EditForm Model="Cobro" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Editar Cobro</h5>
            </div>

            <div class="card-body">
                @* CobroId *@
                <div class="mb-3">
                    <label class="form-label"><strong>CobroId</strong></label>
                    <InputNumber class="form-control" @bind-Value="Cobro.CobroId" readonly></InputNumber>
                </div>

                @* Fecha *@
                <div class="mb-3">
                    <label class="form-label"><strong>Fecha</strong></label>
                    <InputDate class="form-control" @bind-Value="Cobro.Fecha"></InputDate>
                </div>

                @* Deudor *@
                <div class="mb-3">
                    <label class="form-label"><strong>Deudor</strong></label>
                    <input class="form-control" value="@Deudor.Nombres" readonly />
                </div>

                @* Detalles del Cobro *@
                <div class="border border-success p-3 mt-3">
                    <h5>Detalles del Cobro</h5>

                    <PrestamoPicker Prestamos="ListaPrestamos"
                                    PrestamoId="DetalleSeleccionado.PrestamoId"
                                    Valor="DetalleSeleccionado.ValorCobrado"
                                    OnPrestamoSelected="HandlePrestamoSelected" />
                    <hr />
                    <table class="table table-light">
                        <thead class="table table-striped">
                            <tr class="text-center">
                                <th>Pr&eacute;stamoId</th>
                                <th>Cobrado</th>
                                <th>Remover</th>
                            </tr>
                        </thead>
                        <tbody class="text-center">
                            @foreach (var detalle in Cobro.CobroDetalles)
                            {
                                <tr>
                                    <th>@detalle.PrestamoId</th>
                                    <th>@detalle.ValorCobrado</th>
                                    <th>
                                        <button type="button" class="btn btn-outline-danger bi bi-trash"
                                                @onclick="() => RemoverDetalle(detalle)">
                                        </button>
                                    </th>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <hr />
                </div>
                @* Monto *@
                <div class="row mt-2">
                    <div class="col-6 offset-6">
                        <div class="mb-3">
                            <label class="form-label"><strong>Monto</strong></label>
                            <label class="form-control text-end"><strong>@Cobro.Monto</strong></label>

                            <ValidationMessage For="(() => Cobro.Monto)" />
                        </div>
                    </div>
                </div>
            </div>

            @* footer *@
            <div class="card-footer text-center mt-2">
                <a href="/Cobros/Index" class="btn btn-secondary"> <span class="bi bi-arrow-left"></span> Volver</a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int CobroId { get; set; }
    public Cobros Cobro { get; set; } = new Cobros();
    public CobroDetalle DetalleSeleccionado { get; set; } = new();
    public Deudores Deudor { get; set; } = new Deudores();
    public List<Prestamos> ListaPrestamos { get; set; } = [];

    public string Mensaje = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Cobro = await cobroServices.Buscar(CobroId);
        Deudor = await deudorServices.Buscar(Cobro.DeudorId);

        Cobro.Fecha = DateTime.Now;
        ListaPrestamos = await prestamosServices
            .GetList(p => p.DeudorId == Cobro.DeudorId);
    }
    public async Task BuscarPrestamosPendientes()
    {
        ListaPrestamos = await prestamosServices
            .GetPrestamosPendientes(Cobro.DeudorId);
    }

    private async Task HandlePrestamoSelected((Prestamos prestamo, double valor) selection)
    {
        var detalle = new CobroDetalle
            {
                PrestamoId = selection.prestamo.PrestamoId,
                ValorCobrado = selection.valor
            };

        Cobro.CobroDetalles.Add(detalle);
        Cobro.Monto = Cobro.CobroDetalles.Sum(d => d.ValorCobrado);

        DetalleSeleccionado = new CobroDetalle();
        await Task.CompletedTask;
    }

    public async Task Modificar()
    {
        var paso = await cobroServices.Guardar(Cobro);

        if (paso)
        {
            navigation.NavigateTo("/Cobros/Index");
        }
        else
        {
            Mensaje = "No se ha creado correctamente";
        }
    }

    public void RemoverDetalle(CobroDetalle detalle)
    {
        Cobro.CobroDetalles.Remove(detalle);
        DetalleSeleccionado = detalle;
    }
}