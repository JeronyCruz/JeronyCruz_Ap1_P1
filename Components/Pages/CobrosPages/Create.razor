@page "/Cobros/Create"
@rendermode InteractiveServer
@inject DeudorServices deudorServices
@inject CobrosServices cobroServices
@inject PrestamosServices prestamosServices
@inject NavigationManager navigation

<PageTitle> Crear Cobros</PageTitle>

<EditForm Model="@Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Cobro</h5>
            </div>

            <div class="card-body">
                @*Cobro ID*@
                <div class="mb-3">
                    <label for="CobroId" class="form-label text-primary">Cobro</label>
                    <InputNumber class="form-control" @bind-Value="Cobro.CobroId" readonly></InputNumber>
                </div>

                @*Fecha*@
                <div class="mb-3">
                    <label for="fecha" class="form-label text-primary">Fecha</label>
                    <InputDate class="form-control" @bind-Value="Cobro.Fecha"></InputDate>
                </div>

                @*Deudor Id*@
                <div class="mb-3">
                    <label for="DeudorId" class="form-label text-primary">Deudor</label>
                    <div class="input-group">

                        <InputSelect id="DeudorId" class="form-control border-primary" @bind-Value="Cobro.DeudorId">
                            <option value="0" selected disabled>Seleccione un deudor</option>
                            @foreach (var deudor in ListaDeudores)
                            {
                                <option value="@deudor.DeudorId">@deudor.Nombres</option>
                            }
                        </InputSelect>
                        <button type="button" class="btn btn-outline-success bi bi-arrow-clockwise" @onclick="BuscarPrestamosPendientes"></button>
                    </div>
                    <ValidationMessage For="@(() => Cobro.DeudorId)" />
                </div>

                
                @* Detalles del Cobro *@
                <div class="border border-success p-3 mt-3">
                    <h5>Detalles del Cobro</h5>

                    <PrestamoPicker Prestamos="ListaPrestamos"
                                    PrestamoId="DetalleSeleccionado.PrestamoId"
                                    Valor="DetalleSeleccionado.ValorCobrado"
                                    OnPrestamoSelected="HandlePrestamoSelected" />
                    <hr />
                    <table class="table table-light">
                        <thead class="table table-striped">
                            <tr class="Text-center">
                                <th>Pr&eacute;stamo</th>
                                <th>Cobrado</th>
                                <th>Remover</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in Cobro.CobroDetalles)
                            {
                                <tr>
                                    <td>@detalle.PrestamoId</td>
                                    <td>@detalle.ValorCobrado</td>
                                    <td>
                                        <button type="button" class="btn btn-outline-danger bi bi-trash"
                                                @onclick="() => RemoverDetalle(detalle)"></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <hr />
                </div>

                <div class="row">
                    <div class="col-6 offset-6">
                        <div class="mb-3">
                            <label class="form-label"><strong>Monto</strong></label>
                            <label class="form-control text-end"><strong>@Cobro.Monto</strong></label>

                            <ValidationMessage For="(() => Cobro.Monto)" />
                        </div>
                    </div>
                </div>

            </div>
        

            <div class="card-footer text-center mt-2">
                <a href="/Cobros/Index" class="btn btn-outline-primary bi bi-arrow-left"> Volver</a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Cobros Cobro { get; set; } = new Cobros();
    public List<Deudores> ListaDeudores { get; set; } = new List<Deudores>();
    public List<Prestamos> ListaPrestamos { get; set; } = new List<Prestamos>();
    public CobroDetalle DetalleSeleccionado { get; set; } = new CobroDetalle();
    public string mensajeError { get; set; } = string.Empty;
    public string Nombre { get; set; } = string.Empty;
    public double ValorAplicar { get; set; }
    private int? SeleccionadoPrestamoId { get; set; }
    public double ValorTotalCobrado => Cobro.CobroDetalles.Sum(d => d.ValorCobrado);

    protected override async Task OnInitializedAsync()
    {
        ListaDeudores = await deudorServices
        .Listar(d => true);
    }

    public async Task Guardar()
    {
        var paso = await cobroServices.Guardar(Cobro);

        if (paso)
        {

            navigation.NavigateTo("/Cobros/Index");
        }
        else
        {
            
        }
    }

    public async Task BuscarPrestamosPendientes()
    {
        ListaPrestamos = await prestamosServices
            .GetPrestamosPendientes(Cobro.DeudorId);
    }

    private async Task HandlePrestamoSelected((Prestamos prestamo, double valor) selection)
    {
        var detalle = new CobroDetalle
            {
                PrestamoId = selection.prestamo.PrestamoId,
                ValorCobrado = selection.valor
            };

        Cobro.CobroDetalles.Add(detalle);
        Cobro.Monto = Cobro.CobroDetalles.Sum(d => d.ValorCobrado);

        DetalleSeleccionado = new CobroDetalle();
        await Task.CompletedTask;
    }

    private async Task AplicarValor()
    {
        Cobro.CobroDetalles.Clear();
        if (ValorAplicar > 0)
        {

            var prestamosPendientes = await prestamosServices
                .GetPrestamosPendientes(Cobro.DeudorId);
            foreach (var prestamo in prestamosPendientes)
            {
                double valorCobrado = 0;
                if (prestamo.Balance < ValorAplicar)
                    valorCobrado = prestamo.Balance;
                else
                    valorCobrado = ValorAplicar;

                ValorAplicar -= valorCobrado;

                Cobro.CobroDetalles.Add(
                    new CobroDetalle()
                        {
                            PrestamoId = prestamo.PrestamoId,
                            ValorCobrado = valorCobrado
                        }
                );
            }


        }

    }

    public void RemoverDetalle(CobroDetalle detalle)
    {
        Cobro.CobroDetalles.Remove(detalle);
        DetalleSeleccionado.ValorCobrado = detalle.ValorCobrado;

    }
}

